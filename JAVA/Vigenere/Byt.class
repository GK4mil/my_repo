import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Random;
import java.util.Scanner;

public class Byt {
	public static byte[][] generujVin() {
		byte[][] vin = new byte[256][256];
		for (int i = 0; i < 256; i++) {
			for (int j = 0; j < 256; j++) {
				vin[i][j] = (byte) ((i + j) % 256);
			}
		}
		return vin;
	}

	public static byte[] odczytajKlucz(String loka) {
		byte[] kluczt = null; // tablica do przetrzymywania klucza
		Scanner lok = new Scanner(System.in);
		System.out
				.println("Podaj lokalizacje pliku klucza:(jezeli chcesz uzyc wygenerowanego\n"
						+ "klucza wpisz: '" + loka + "\\binary_key\\key.txt'");
		String klucz = lok.nextLine(); // pobranie lokalizacji pliku
										// szyfrujacego
		lok.close();
		// odczyt
		File file = new File(klucz);
		RandomAccessFile raf = null;
		try {
			raf = new RandomAccessFile(klucz, "r"); // otwarty strumien
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("Nie znaleziono pliku");
		}

		try {
			kluczt = new byte[(int) raf.length()]; // tworzy tablice do
													// przetrzymywania klucza
		} catch (IOException e) {

		} catch (NullPointerException e) {
			// TODO Auto-generated catch block
			System.out.println("Zla sciezka dostepu");
		}

		try {
			raf.read(kluczt); // zapis do tablicy
			raf.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return kluczt;
	}

	public static void generujKlucz(String lokalizacja) {
		System.out
				.println("Czy chcesz wygenerowac klucz binarny?\n1 - tak\n0 - nie");
		Scanner wybor = new Scanner(System.in);
		// wybor.close();
		if (wybor.nextInt() == 1) {
			File binarykey = new File(lokalizacja);
			binarykey.mkdir();
			System.out.println("Ilu bajtowy ma byc klucz?");
			File keyfile = new File(lokalizacja + "\\key.txt");
			try {
				keyfile.createNewFile(); // tworzenie pliku
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			byte[] rkey = new byte[wybor.nextInt()]; // tablica bajtowa
			Random gen = new Random();
			gen.nextBytes(rkey); // generowanie losowych wartosci bajtow klucza
			try {
				RandomAccessFile raf = new RandomAccessFile(keyfile, "rw");
				raf.write(rkey);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();

			}

			catch (IOException e) {
				System.out.print("\nBłąd zapisu");
				return;
			}

		}
	}

	public static void szyfruj(byte[] klucz, byte[][] vin, String lokalizacja,
			String doszyfr) {
		File file = new File(lokalizacja + "\\encrypted\\" + doszyfr);
		try {
			file.createNewFile();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		RandomAccessFile raf1 = null;
		try {
			raf1 = new RandomAccessFile(file, "rw");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// generowanie pliku po szyfrowaniu oraz jego otworzenie
		RandomAccessFile raf2 = null;
		File file1 = new File(lokalizacja + "\\" + doszyfr);
		try {
			raf2 = new RandomAccessFile(file1, "rw");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// otwarcie pliku do szyfrowania
		// *******************************
		// Szyfrowanie
		int iterator_pokluczu = 0;
		int x = 0, y = 0;
		byte t_plik = 0;
		byte t_klucz = 0;
		try {
			for (long i = 0; i < raf2.length(); i++) {
				if (iterator_pokluczu == klucz.length)
					iterator_pokluczu = 0;
				t_plik = raf2.readByte();
				t_klucz = klucz[iterator_pokluczu];

				for (int k = 0; k < 256; k++) {
					if (t_plik == vin[0][k]) {
						x = k;
						break;
					}
				}
				for (int l = 0; l < 256; l++) {
					if (t_klucz == vin[l][0]) {
						y = l;
						break;
					}
				}

				raf1.write(vin[x][y]); // inicjalizacja
				iterator_pokluczu++;
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static void deszyfruj(byte[] klucz, byte[][] vin,
			String lokalizacja, String odszyfr) {
		File file = new File(lokalizacja + "\\decrypted\\" + odszyfr);
		try {
			file.createNewFile();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		RandomAccessFile raf1 = null;
		try {
			raf1 = new RandomAccessFile(file, "rw");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// generowanie pliku po deszyfrowaniu oraz jego otworzenie

		File file1 = new File(lokalizacja + "\\" + odszyfr);
		RandomAccessFile raf2 = null;
		try {
			raf2 = new RandomAccessFile(file1, "rw");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// otwarcie pliku do deszyfrowania

		// deSzyfrowanie
		int iterator_pokluczu = 0;
		int x = 0, y = 0;
		byte t_plik = 0;
		byte t_klucz = 0;
		try {
			for (long i = 0; i < raf2.length(); i++) {
				if (iterator_pokluczu == klucz.length)
					iterator_pokluczu = 0;
				t_plik = raf2.readByte();
				t_klucz = klucz[iterator_pokluczu];
//////////////////////////////////////////
				for (int k = 0; k < 256; k++) {
					if (t_klucz == vin[0][k]) {
						y = k;
						break;
					}
				}
				for (int l = 0; l < 256; l++) {
					if (t_plik == vin[l][y]) {
						x = l;
						break;
					}
				}

				raf1.write(vin[x][0]); // inicjalizacja
				iterator_pokluczu++;
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
